;# supervisord-global
;# http://supervisord.org/configuration.html
;# https://github.com/Supervisor/supervisor/blob/master/supervisor/skel/sample.conf

[inet_http_server]
port=127.0.0.1:9101
username=admin
password=admin

[supervisord]
logfile = %(here)s/logs/supervisord.log
logfile_maxbytes = 50MB
logfile_backups=10
loglevel = info
pidfile = %(here)s/logs/supervisord.pid
nodaemon = false
minfds = 1024
minprocs = 200
umask = 022
identifier = supervisor
directory = %(here)s
nocleanup = false
childlogdir = %(here)s/logs/children
strip_ansi = false

[supervisorctl]
serverurl = http://localhost:9101
username = admin
password = admin

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:simple-http-server]
command=python -m SimpleHTTPServer 8777
process_name=%(program_name)s-%(process_num)s  ; process_name expr (default %(program_name)s)
numprocs=1                      ; number of processes copies to start (def 1)
directory=%(here)s              ; directory to cwd to before exec (def no cwd)
umask=022                     	; umask for process (default None)
priority=999                  	; the relative start priority (default 999)
autostart=true                	; start at supervisord start (default: true)
autorestart=unexpected        	; whether/when to restart (default: unexpected)
startsecs=1                   	; number of secs prog must stay running (def. 1)
startretries=3                	; max # of serial start failures (default 3)
exitcodes=0,2                 	; 'expected' exit codes for process (default 0,2)
stopsignal=TERM               	; signal used to kill process (default TERM)
stopwaitsecs=10               	; max num secs to wait b4 SIGKILL (default 10)
stopasgroup=true             	; send stop signal to the UNIX process group (default false)
killasgroup=true             	; SIGKILL the UNIX process group (def false)
# user=work                   	; setuid to this UNIX account to run the program
# stdout_logfile=stdout-%(program_name)s-%(process_num)s.log
# stderr_logfile=stderr-%(program_name)s-%(process_num)s.log

;redirect_stderr=false          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        	; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   	; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     	; # of stdout logfile backups (default 10)
;stdout_capture_maxbytes=1MB   	; number of bytes in 'capturemode' (default 0)
;stdout_events_enabled=false   	; emit events on stdout writes (default false)
;stderr_logfile=/a/path        	; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   	; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     	; # of stderr logfile backups (default 10)
;stderr_capture_maxbytes=1MB   	; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false   	; emit events on stderr writes (default false)
;environment=A="1",B="2"       	; process environment additions (def no adds)
;serverurl=AUTO                	; override serverurl computation (childutils)